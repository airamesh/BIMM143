---
title: "Class 13: RNASeq Mini Project"
author: "Aishwarya Ramesh"
format: pdf
---

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703 

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

RNASeq Steps
- read colData(metadata) and countData(counts), filter zero count genes
- DESeq
- Plot
- Pathway analysis (KEGG, GO, etc.)


## RNASeq input data

Again, I need two things:
- countData
- col

```{r}
colData <-  read.csv('GSE37704_metadata.csv', row.names=1)
head(colData)
```

```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names=1)
head(countData)
```

> Q1: Complete the code below to remove the troublesome first column from countData 

There is an unwante dfirst column "length" in the countData. I will need to remove this first before going on to further analysis

Can be done in two ways
```{r}
# modifying countData itself
countData <- as.matrix(countData[,-1])
head(countData)
```


```{r}
# Defining new variable of counts with the first column removed
counts <- countData[,-1]
head(counts)
```

> Q2. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

There are lots of genes here with no count data
```{r}
# Filter count data where you have 0 read count across all samples.
countData <-  countData[rowSums(countData)!=0, ]
head(countData)
```

How many genes do we have left?

```{r}
nrow(countData)
```

Do they match?

```{r}
all(colnames(countData) == rownames(colData))
```

## Running DESeq

1st step setup the object requires by DESeq

```{r}
library(DESeq2)
dds <-  DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```


> Q3. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.
## Volcano Plot

```{r}
summary(res)
```

## Volcano Plot
```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

> Q4. Improve this plot by completing the below code, which adds color and axis labels

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj<0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

## Adding gene annotation

> Q5. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys= row.names(res), 
                    keytype="ENSEMBL",
                    column='SYMBOL',
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys= row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype='ENSEMBL',
                    column='GENENAME',
                    multiVals="first")

head(res, 10)
```

> Q6. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res <-  res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```


# Section 2: Pathway Analysis

Again we will use the `gage()` package and function with a focus first on KEGG and GO. 

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```


Recall that `gage()` wants only a vector of importance as input, that has names in ENTREZ ID format

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

Generate a colored pathway figure for hsa04110 Cell cycle

```{r}
library(pathview)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

Creating a PDF

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

Pulling out top 5 upregulated pathways and doing analysis

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Imaging it

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa00140.pathview.png)

![](hsa04142.pathview.png)

![](hsa04330.pathview.png)


# Section 3: Gene Ontology (GO)

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Section 4: Reactome Analysis

Reactome is database consisting of biological molecules and their relation to pathways and processes
Let's now conduct over-representation enrichment analysis and pathway-topology analysis with Reactome using the previous list of significant genes generated from our differential expression results above.

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```


> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The Endosomal/Vacuolar pathway has the most significant entities p-value at 1.67E-4. The most significant pathways listed do not match the previous KEGG results. This is because the two databases differ in the average number of pathways they contain, the number of proteins per pathway, types of biochemical interactions described, etc as well as the level of detail they incorporate in any given pathway. They describe the same pathways, but at different angles. 



